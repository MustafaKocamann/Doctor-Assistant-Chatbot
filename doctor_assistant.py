"""
1-)Problem TanÄ±mÄ±: KullanÄ±cÄ±nÄ±n saÄŸlÄ±k sorularÄ±nÄ± anlayan ve yanÄ±tlayan GPT tabanlÄ± dijital doktor asistanÄ±.
    - KullanÄ±cÄ±nÄ±n adÄ± ve yaÅŸÄ± doÄŸrultusunda yanÄ±tlar Ã¼reten bir model.
    - Mesaj geÃ§miÅŸini dikkate alarak diyaloÄŸu sÃ¼rdÃ¼ren bir yapÄ± olmalÄ±.
    - OpenAI API kullanÄ±larak geliÅŸtirilmiÅŸtir.
    - Ä°lk olarak terminalde Ã§alÄ±ÅŸan bir versiyon, sonra da FastAPI ile web tabanlÄ± bir versiyon geliÅŸtirilecektir.
    - Client tarafÄ±nÄ± yazÄ±p test edilecektir.


2-) Dataset: Veri seti kullanÄ±lmayacak, OpenAI'nin GPT-3.5 kullanÄ±larak prompt engineering ile Ã§Ã¶zÃ¼lecek.


3-) Model TanÄ±tÄ±mÄ±: OpenAI'nin GPT-3.5 modeli kullanÄ±lacak.
    - API Ã¼zerinden iletiÅŸim kurarak kullanÄ±cÄ±lara gerÃ§ek zamanlÄ± saÄŸlÄ±k Ã¶nerileri sunan bir sistem olsun.


5-)API Definition: OpenAI API'si ile entegrasyon saÄŸlanacak.

6-)Install Libraries:
    - fastapi: Web api geliÅŸtirmek iÃ§in modern ve hÄ±zlÄ± bir framework.Asenkron bir yapÄ±ya sahip.
    - uvicorn: FastAPI uygulamasÄ±nÄ± Ã§alÄ±ÅŸtÄ±rmak iÃ§in ASGI sunucusudur.
    - openai: OpenAI'nin API'sine eriÅŸim saÄŸlamak iÃ§in kullanÄ±lan resmi kÃ¼tÃ¼phane.
    - python-dotenv: Ortam deÄŸiÅŸkenlerini yÃ¶netmek iÃ§in kullanÄ±lÄ±r. API anahtarlarÄ±nÄ± gÃ¼venli bir ÅŸekilde saklamak iÃ§in idealdir. .env dosyasÄ±ndan api anahtarlarÄ±nÄ± yÃ¼klemek iÃ§in kullanÄ±lÄ±r. 
    

7-) Import Libraries
"""

"""
Terminal tabanlÄ± GPT-3.5 tabanlÄ± dijital doktor asistanÄ±.
Function calling ile yaÅŸa uygun saÄŸlÄ±k ipuÃ§larÄ± verebilir.
"""

import os
from dotenv import load_dotenv
from openai import OpenAI

# API key yÃ¼kle
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

# HafÄ±za: kullanÄ±cÄ± mesajlarÄ±nÄ± ve cevaplarÄ± tutacak
memory = []

# KullanÄ±cÄ± bilgisi
user_name = input("AdÄ±nÄ±z: ")
age = input("YaÅŸÄ±nÄ±z: ")

# Intro mesajÄ±
intro = (
    f"Sen bir dijital doktor asistanÄ±sÄ±n. Hasta {user_name}, {age} yaÅŸÄ±nda. "
    "SaÄŸlÄ±k sorunlarÄ± hakkÄ±nda konuÅŸmak istiyorsun. AmacÄ±n, hastaya saÄŸlÄ±kla ilgili sorularÄ±nda yardÄ±mcÄ± olmak ve gÃ¼ven verici, anlaÅŸÄ±lÄ±r yanÄ±tlar Ã¼retmektir. "
    "AÅŸaÄŸÄ±daki kurallara gÃ¶re hareket et: \n"
    "1. HastanÄ±n yaÅŸÄ±na uygun, dikkatli ve nazik cevaplar ver; hastaya ismiyle hitap et.\n"
    "2. CevaplarÄ±n moral bozucu olmamalÄ±. Ciddi saÄŸlÄ±k sorunlarÄ± varsa, korkutmadan yÃ¶nlendir.\n"
    "3. HastayÄ± gerektiÄŸinde bir uzmana baÅŸvurmasÄ± iÃ§in yÃ¶nlendir.\n"
    "4. Cinsiyet, dil, din veya Ä±rk ayrÄ±mÄ± yapma; tarafsÄ±z ol.\n"
    "5. AÃ§Ä±k, anlaÅŸÄ±lÄ±r ve destekleyici bir dil kullan. GerektiÄŸinde basit Ã¶neriler veya ek aÃ§Ä±klamalar ver.\n"
    "6. Kesin tanÄ± koyamazsÄ±n; yalnÄ±zca rehberlik ve bilgilendirme yapabilirsin.\n"
    "7. TÄ±bbi jargon kullanacaksan, mutlaka aÃ§Ä±klamasÄ±nÄ± yap.\n"
)
memory.append({"role": "user", "content": intro})

print(f"\nMerhaba {user_name}, ben dijital doktor asistanÄ±nÄ±z ğŸ˜Š SorularÄ±nÄ±zÄ± sorabilirsiniz.\n")

# SÃ¼rekli kullanÄ±cÄ± girdisi alma ve yanÄ±t Ã¼retme dÃ¶ngÃ¼sÃ¼
while True:
    user_message = input(f"{user_name}: ")
    if user_message.lower() in ["exit", "quit", "Ã§Ä±kÄ±ÅŸ"]:
        print("Sana yardÄ±mcÄ± olabildiysem ne mutlu! GÃ¶rÃ¼ÅŸmek Ã¼zere!")
        break

    # KullanÄ±cÄ± mesajÄ±nÄ± hafÄ±zaya ekle
    memory.append({"role": "user", "content": user_message})

    # OpenAI Ã§aÄŸrÄ±sÄ±
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=memory
    )

    reply_text = response.choices[0].message.content
    print(f"Dijital Doktor AsistanÄ±: {reply_text}")

    # AI cevabÄ±nÄ± hafÄ±zaya ekle
    memory.append({"role": "assistant", "content": reply_text})
